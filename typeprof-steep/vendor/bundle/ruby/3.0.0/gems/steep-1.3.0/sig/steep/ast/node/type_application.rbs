module Steep
  module AST
    module Node
      class TypeApplication
        attr_reader location: RBS::Location[untyped, untyped]

        attr_reader node: Parser::AST::Node

        def line: () -> Integer

        def source: () -> String

        def initialize: (RBS::Location[untyped, untyped]) -> void

        def types: (RBS::Resolver::context, Types::Factory, Array[Symbol] type_vars) -> (Array[Types::t] | RBS::ParsingError)

        def types?: (RBS::Resolver::context, Types::Factory, Array[Symbol] type_vars) -> Array[Types::t]?

        @type_str: String?
        def type_str: () -> String

        def type_location: () -> RBS::Location[untyped, untyped]

        # Set the back reference to the `:tapp` node
        def set_node: (Parser::AST::Node) -> void

        def self.parse: (RBS::Location[untyped, untyped]) -> TypeApplication?
      end
    end
  end
end
