module Steep
  module AST
    module Types
      class Factory
        @env: RBS::Environment

        attr_reader definition_builder: RBS::DefinitionBuilder

        attr_reader type_cache: Hash[RBS::Types::t, t]

        attr_reader type_interface_cache: untyped

        @type_name_resolver: RBS::Resolver::TypeNameResolver?

        def inspect: () -> String

        def initialize: (builder: RBS::DefinitionBuilder) -> void

        def type_name_resolver: () -> RBS::Resolver::TypeNameResolver

        def type: (RBS::Types::t `type`) -> t

        def type_opt: (RBS::Types::t? `type`) -> t?

        def type_1: (t `type`) -> RBS::Types::t

        def type_1_opt: (t?) -> RBS::Types::t?

        def function_1: (Interface::Function func) -> RBS::Types::Function

        def params: (RBS::Types::Function `type`) -> Interface::Function::Params

        def type_param: (RBS::AST::TypeParam type_param) -> Interface::TypeParam

        def type_param_1: (Interface::TypeParam type_param) -> RBS::AST::TypeParam

        @method_type_cache: Hash[RBS::MethodType, Interface::MethodType]

        def method_type: (RBS::MethodType method_type, method_decls: Set[TypeInference::MethodCall::MethodDecl]) -> Interface::MethodType

        def method_type_1: (Interface::MethodType method_type) -> RBS::MethodType

        def unfold: (RBS::TypeName type_name, Array[t] args) -> t

        # Unfold type alias one step, or returns itself
        #
        def expand_alias: (t `type`) -> t

        # Unfold type alias until non alias type
        #
        # * Unions and intersections are expanded
        # * Returns `nil` if it is recursive
        #
        def deep_expand_alias: (t `type`, ?recursive: Set[RBS::TypeName]) -> t?

        # Convert union types to array of types
        #
        def flatten_union: (t `type`, ?Array[t] acc) -> Array[t]

        def unwrap_optional: (Types::t `type`) -> [Types::t, Types::t]

        def module_name?: (RBS::TypeName type_name) -> bool

        def class_name?: (RBS::TypeName type_name) -> bool

        def env: () -> RBS::Environment

        def absolute_type: (t `type`, context: RBS::Resolver::context) -> t

        def absolute_type_name: (RBS::TypeName type_name, context: RBS::Resolver::context) -> RBS::TypeName?

        def instance_type: (RBS::TypeName type_name, ?args: Array[t]?, ?location: untyped?) -> t

        def try_singleton_type: (t) -> t?

        def try_instance_type: (t) -> t?
      end
    end
  end
end
